ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'
ENV['FORWARD_DOCKER_PORTS'] = "1"
ENV['VAGRANT_EXPERIMENTAL']="typed_triggers"

# Names of Docker images built:
ZOONODE_IMAGE  = "ds/cv04/keeper:0.1"
CLIENT_IMAGE  = "ds/cv04/client:0.1"
MQTT_IMAGE    = "ds/cv04/mqtt:0.1"

# Subnet to use:
SUBNET = "10.0.1."

# Cluster name
BROKER_CLUSTER_NAME = "mycluster"

# Configure the individual types of nodes
ZOONODE = {:nameprefix => "keeper-",
          :subnet => SUBNET,
          :ip_offset => 10,
          :image => ZOONODE_IMAGE}

MQTT  = {:nameprefix => "mqtt-",
         :subnet => SUBNET,
         :ip_offset => 200,
         :image => MQTT_IMAGE,
}

CLIENT = {:nameprefix => "client-",
          :subnet => SUBNET,
          :ip_offset => 100,
          :image => CLIENT_IMAGE,
          :config => "client/client.cfg"
}

# Configure number of nodes in the system
ZOONODES_COUNT = 3
CLIENTS_COUNT = 6
MQTTS_COUNT = 3

zoo_servers = ""
zoo_client_hosts = ""

Vagrant.configure("2") do |config|

  config.trigger.before :up, type: :command do |trigger|
    trigger.name = "Build docker images and configuration files"
    trigger.ruby do |env, machine|
        # --- start of Ruby script ---
        # Build Zoonode list:
        puts "Building keeper configuration."
        zoo_ensemble = []
        zoo_hosts = []
        (1..ZOONODES_COUNT).each do |i|
            zoo_ensemble << "server.#{i}=#{ZOONODE[:subnet]}#{ZOONODE[:ip_offset] + i}:2888:3888;2181"
            zoo_hosts << "#{ZOONODE[:subnet]}#{ZOONODE[:ip_offset] + i}:2181"
        end
        zoo_servers = zoo_ensemble.join(" ")
        zoo_client_hosts = zoo_hosts.join(",")
        # Build Zoonode image:
        puts "Building keeper image:"
        `docker build keeper -t "#{ZOONODE_IMAGE}"`
        # Build mqtt node image:
        puts "Building mqtt node image:"
        `docker build broker -t "#{MQTT_IMAGE}"`
        # Build client node image:
        puts "Building client node image:"
        `docker build client -t "#{CLIENT_IMAGE}"`
    end
  end

  config.ssh.insert_key = false

  # Definition of N Keeper
  (1..ZOONODES_COUNT).each do |i|
    node_ip_addr = "#{ZOONODE[:subnet]}#{ZOONODE[:ip_offset] + i}"
    node_name = "#{ZOONODE[:nameprefix]}#{i}"
    # Definition of Keeper
    config.vm.define node_name do |s|
      s.vm.network "private_network", ip: node_ip_addr
      s.vm.hostname = node_name
      s.vm.provider "docker" do |d|
        d.image = ZOONODE[:image]
        d.name = node_name
        d.has_ssh = true
        d.env = { "ZOO_MY_ID" => i, "ZOO_SERVERS" => "#{zoo_servers}" }
      end
      s.vm.post_up_message = "Node #{node_name} up and running. You can access the node with 'vagrant ssh #{node_name}'}"
    end
  end

  # Definition of N mqtt brokers
  (1..MQTTS_COUNT).each do |i|
    node_ip_addr = "#{MQTT[:subnet]}#{MQTT[:ip_offset] + i}"
    node_name = "#{MQTT[:nameprefix]}#{i}"
    # Definition of client node
    config.vm.define node_name do |s|
      s.vm.network "private_network", ip: node_ip_addr
      s.vm.hostname = node_name
      s.vm.provider "docker" do |d|
        d.image = MQTT[:image]
        d.name = node_name
        d.has_ssh = true
        d.env = { "ZOO_SERVERS" => "#{zoo_client_hosts}", "CURR_IP" => "#{node_ip_addr}", "CLUSTER_NAME" => "#{BROKER_CLUSTER_NAME}" }
      end
      s.vm.post_up_message = "Node #{node_name} up and running. You can access the node with 'vagrant ssh #{node_name}'}"
    end
  end

   # Definition of N client nodes
  (1..CLIENTS_COUNT).each do |i|
    node_ip_addr = "#{CLIENT[:subnet]}#{CLIENT[:ip_offset] + i}"
    node_name = "#{CLIENT[:nameprefix]}#{i}"
    # Definition of client node
    config.vm.define node_name do |s|
      s.vm.network "private_network", ip: node_ip_addr
      s.vm.hostname = node_name
      s.vm.provider "docker" do |d|
        d.image = CLIENT[:image]
        d.name = node_name
        d.has_ssh = true
        d.env = { "ZOO_SERVERS" => "#{zoo_client_hosts}", "CLUSTER_NAME" => "#{BROKER_CLUSTER_NAME}" }
      end
      s.vm.post_up_message = "Node #{node_name} up and running. You can access the node with 'vagrant ssh #{node_name}'}"
    end
  end

end

# EOF
